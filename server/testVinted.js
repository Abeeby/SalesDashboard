const { getVintedData } = require('./vintedApi');
const fetch = require('node-fetch');

async function runTests() {
  console.log('üöÄ D√©marrage des tests Vinted...\n');
  const errors = [];
  const successes = [];

  // Test 1: Connexion de base
  try {
    console.log('Test 1: Connexion √† Vinted...');
    const response = await fetch('https://www.vinted.fr');
    if (response.ok) {
      successes.push('‚úÖ Connexion de base √† Vinted r√©ussie');
    } else {
      errors.push(`‚ùå √âchec de connexion √† Vinted: ${response.status}`);
    }
  } catch (error) {
    errors.push(`‚ùå Erreur de connexion: ${error.message}`);
  }

  // Test 2: R√©cup√©ration du profil
  try {
    console.log('Test 2: R√©cup√©ration du profil...');
    const data = await getVintedData();
    if (data.profile) {
      successes.push('‚úÖ R√©cup√©ration du profil r√©ussie');
    }
  } catch (error) {
    errors.push(`‚ùå Erreur profil: ${error.message}`);
  }

  // Test 3: R√©cup√©ration des articles
  try {
    console.log('Test 3: R√©cup√©ration des articles...');
    const data = await getVintedData();
    if (data.items && data.items.length > 0) {
      successes.push(`‚úÖ R√©cup√©ration des articles r√©ussie (${data.items.length} articles)`);
    } else {
      errors.push('‚ùå Aucun article trouv√©');
    }
  } catch (error) {
    errors.push(`‚ùå Erreur articles: ${error.message}`);
  }

  // Test 4: Test des cookies
  try {
    console.log('Test 4: Validation des cookies...');
    const response = await fetch('https://www.vinted.fr/api/v2/oauth/token', {
      headers: {
        'Cookie': require('./vintedApi').VINTED_HEADERS.Cookie
      }
    });
    if (response.ok) {
      successes.push('‚úÖ Cookies valides');
    } else {
      errors.push(`‚ùå Cookies invalides: ${response.status}`);
    }
  } catch (error) {
    errors.push(`‚ùå Erreur cookies: ${error.message}`);
  }

  return { errors, successes };
}

// Ex√©cuter les tests et mettre √† jour BUGS.md
runTests().then(({ errors, successes }) => {
  const fs = require('fs');
  const path = require('path');

  const bugsContent = `# Suivi des Bugs et Probl√®mes
Derni√®re mise √† jour: ${new Date().toLocaleString()}

## R√©sultats des Tests

### Succ√®s ‚úÖ
${successes.join('\n')}

### Erreurs ‚ùå
${errors.join('\n')}

## Probl√®mes Identifi√©s

### Authentification Vinted
${errors.length > 0 ? '- [ ] Probl√®mes d\'authentification d√©tect√©s' : '- [x] Authentification OK'}
${errors.some(e => e.includes('cookie')) ? '- [ ] Probl√®me de cookies' : '- [x] Cookies OK'}
${errors.some(e => e.includes('CORS')) ? '- [ ] Erreurs CORS' : '- [x] CORS OK'}

### API Vinted
- [ ] GET /api/v2/users/{id}
- [ ] GET /api/v2/users/{id}/items
- [ ] GET /api/v2/users/{id}/favourites
- [ ] GET /api/v2/users/{id}/messages

### Dashboard
- [ ] Affichage des donn√©es
- [ ] Mise √† jour en temps r√©el
- [ ] Graphiques

## Logs D√©taill√©s
\`\`\`
${errors.join('\n')}
\`\`\`

## Solutions Propos√©es
1. Rafra√Æchissement automatique des cookies
2. Mise en place d'un proxy pour √©viter les erreurs CORS
3. Impl√©mentation d'un syst√®me de retry
4. Mise en cache des donn√©es

## √Ä Faire
- [ ] Impl√©menter la gestion des erreurs
- [ ] Ajouter des timeouts
- [ ] Mettre en place des tests automatis√©s
- [ ] Am√©liorer la documentation
`;

  fs.writeFileSync(path.join(__dirname, '..', 'BUGS.md'), bugsContent);
  console.log('\nüìù BUGS.md mis √† jour avec les r√©sultats des tests');
}); 